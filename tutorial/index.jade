.chapter(data-title='Twilio Chat Swift')
  .step(data-title='Introduction', data-file='app/src/main/AndroidManifest.xml')
    :markdown
      ## Introduction

      Ready to implement a chat application using Twilio IP Messaging Client?
      Here is how it works at a high level:

      1. We use [Parse](//www.parse.com/) to handle session management and user
      registration in our app. 

      1. [Twilio IP Messaging](//www.twilio.com/ip-messaging) is the core product
      we'll be using to handle all the chat functionality.

      1. We use a server side app to generate [user access
      tokens](//www.twilio.com/docs/api/ip-messaging/guides/identity) which contains
      all your Twilio account information. The IP Messaging Client uses this token
      to connect with the API

      1. [Twilio Common](//media.twiliocdn.com/sdk/rtc/android/common/releases/0.1.10.b62-b0c2c3f/docs)
      is the part of the SDK than handles access tokens and even refreshes them upon token
      expiration.

      ---

      **See Also:**
      * [IP Messaging API](//www.twilio.com/docs/api/ip-messaging)
      * [Channels and Messages](//www.twilio.com/docs/api/ip-messaging/guides/channels)
      * [User Identity & Access Tokens](//www.twilio.com/docs/api/ip-messaging/guides/channels)
      * [Twilio IP Messaging Client Reference](//media.twiliocdn.com/sdk/rtc/android/ip-messaging/releases/0.4.10.b204-57cc05a/docs)
      * [Twilio Common Reference](//media.twiliocdn.com/sdk/rtc/android/common/releases/0.1.10.b62-b0c2c3f/docs)

  .step(data-title='Initializing the Client',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/IPMessagingClientManager.java',
        data-highlight='83-151')
    :markdown
      ## Initializing the IP Messaging Client

      The only thing you need to create a client, is an access token. This token
      holds information about your Twilio account and IP Messaging API keys. You
      can find an example application written in node that demonstrates how to
      generate the token [here](//github.com/TwilioDevEd/twiliochat).

      We use [Parse cloud code
      webhooks](//parse.com/docs/cloudcode/guide#cloud-code-advanced-cloud-code-webhooks)
      to make a request to our server and get the access token.

      ---

      **See Also:**
      * [Parse cloud code webhooks](//parse.com/docs/cloudcode/guide#cloud-code-advanced-cloud-code-webhooks)
      
  .step(data-title='Getting the Channel List',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='60-94')
    :markdown
      ## Getting the Channel List

      Our `ChannelManager` class takes care of everything related to channels.
      The first thing we need to do when the class is initialized, is to store
      a list of channels of type `Channels` that we get by calling the method `getChannels`
      from the IP Messaging Client.

      Once we have a `Channels` object, we can fetch the actual channels using the
      `Channels'` method `loadChannelsWithListener`. Once that operation
      finishes successfully, call the method `getChannels` on the same object, to
      get an array of channels.
      
  .step(data-title='Join the General Channel',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='113-162')
    :markdown
      ## Join the General Channel

      This application will try to join a channel called "General Channel" when it starts.
      If the channel doesn't exist, we'll create one with that name. The scope of
      this example application will show you how to work only with public channels,
      but the IP Messaging client allows you to create private channels and handle
      invitations.

      Notice we set a unique name for the general channel as we don't want to
      create a new general channel every time we start the application.
      
  .step(data-title='Listen to Channel Events',
        data-file='app/src/main/java/com/twilio/twiliochat/fragments/MainChatFragment.java',
        data-highlight='166-181')
    :markdown
      ## Listen to Channel Events

      We set a channel's listener to `MainChatFragment` that implements `ChannelListener`,
      and here we implemented the following methods that listen to channel events:

      * `messageAdded`: When someone sends a message to the channel you are connected to.
      * `memberJoined`: When someone joins the channel.
      * `memberLeft`: When someone leaves the channel.
      
      As you may have noticed, each one of these methods include useful objects
      as parameters, such as the actual message that was added to the channel.
      
  .step(data-title='Joining Other Channels',
        data-file='app/src/main/java/com/twilio/twiliochat/fragments/MainChatFragment.java',
        data-highlight='109-146')
    :markdown
      ## Joining Other Channels

      The application uses a [Drawer Layout](//developer.android.com/reference/android/support/v4/widget/DrawerLayout.html)
      to show a list of the channels created for that Twilio account.

      When you tap on the name of a channel from the sidebar, that channel is set
      on the `MainChatFragment`. The `setCurrentChannel` method takes care of joining
      to the selected channel and loading the messages.
      
  .step(data-title='Creating a Channel',
        data-file='app/src/main/java/com/twilio/twiliochat/ipmessaging/ChannelManager.java',
        data-highlight='96-111')
    :markdown
      ## Creating a Channel

      We use an input dialog so the user can type the name of the new channel.
      The only restriction here, is that the user can't create a channel called
      "General Channel". Other than that, creating a channel is as simple as calling
      `createChannel(Map<String, Object> options, CreateChannelListener listener)`

  .step(data-title='Deleting a Channel', data-file='twiliochat/MenuViewController.swift', data-highlight='163-178')
    :markdown
      ## Deleting a Channel

      Deleting a channel is as simple as creating one. We'll use the `UITableView`
      hability to delete a cell. Once you have figured out what channel is meant
      to be deleted (from the selected cell index path), deleting it is as simple
      as calling the channel's method `destroyWithCompletion`.

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented a simple chat application in objective-c.

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
